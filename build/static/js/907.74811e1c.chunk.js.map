{"version":3,"file":"static/js/907.74811e1c.chunk.js","mappings":"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","sources":["pages/auth/reset-password.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Link, useNavigate, useLocation } from 'react-router-dom';\nimport { Layout } from '../../components/layout/layout.tsx';\nimport { Container } from '../../components/layout/container.tsx';\nimport { Alert } from '../../components/ui/alert.tsx';\nimport { Spinner } from '../../components/ui/spinner.tsx';\nimport { AuthService } from '../../services/auth-service.ts';\n\n/**\n * Reset password page component\n */\nexport const ResetPasswordPage: React.FC = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [formData, setFormData] = useState({\n    password: '',\n    confirmPassword: '',\n  });\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string>('');\n  const [success, setSuccess] = useState<boolean>(false);\n\n  // Get token from URL query params\n  const queryParams = new URLSearchParams(location.search);\n  const token = queryParams.get('token');\n\n  // Handle input change\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const { name, value } = e.target;\n    setFormData((prev) => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  // Validate form\n  const validateForm = (): boolean => {\n    if (formData.password !== formData.confirmPassword) {\n      setError('Passwords do not match');\n      return false;\n    }\n    \n    if (formData.password.length < 8) {\n      setError('Password must be at least 8 characters long');\n      return false;\n    }\n    \n    if (!token) {\n      setError('Invalid or missing reset token');\n      return false;\n    }\n    \n    return true;\n  };\n\n  // Handle form submission\n  const handleSubmit = async (e: React.FormEvent): Promise<void> => {\n    e.preventDefault();\n    setError('');\n    \n    if (!validateForm()) {\n      return;\n    }\n    \n    setIsLoading(true);\n\n    try {\n      if (token) {\n        await AuthService.resetPassword(token, formData.password);\n        setSuccess(true);\n        \n        // Redirect to login after 3 seconds\n        setTimeout(() => {\n          navigate('/login');\n        }, 3000);\n      } else {\n        setError('Invalid or missing reset token');\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to reset password. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Layout>\n      <Container maxWidth=\"sm\" className=\"mt-8\">\n        <div className=\"sm:mx-auto sm:w-full sm:max-w-md\">\n          <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">Reset your password</h2>\n          <p className=\"mt-2 text-center text-sm text-gray-600\">\n            Enter your new password below\n          </p>\n        </div>\n\n        <div className=\"mt-8 sm:mx-auto sm:w-full sm:max-w-md\">\n          <div className=\"bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10\">\n            {error && (\n              <Alert type=\"error\" className=\"mb-4\" onClose={() => setError('')}>\n                {error}\n              </Alert>\n            )}\n            \n            {success ? (\n              <Alert type=\"success\" className=\"mb-4\">\n                <p>Your password has been successfully reset!</p>\n                <p className=\"mt-2\">\n                  You will be redirected to the login page in a few seconds...\n                </p>\n              </Alert>\n            ) : (\n              <form className=\"space-y-6\" onSubmit={handleSubmit}>\n                <div>\n                  <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700\">\n                    New Password\n                  </label>\n                  <div className=\"mt-1\">\n                    <input\n                      id=\"password\"\n                      name=\"password\"\n                      type=\"password\"\n                      autoComplete=\"new-password\"\n                      required\n                      value={formData.password}\n                      onChange={handleChange}\n                      className=\"appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm\"\n                    />\n                  </div>\n                  <p className=\"mt-1 text-xs text-gray-500\">\n                    Password must be at least 8 characters long\n                  </p>\n                </div>\n\n                <div>\n                  <label htmlFor=\"confirmPassword\" className=\"block text-sm font-medium text-gray-700\">\n                    Confirm New Password\n                  </label>\n                  <div className=\"mt-1\">\n                    <input\n                      id=\"confirmPassword\"\n                      name=\"confirmPassword\"\n                      type=\"password\"\n                      autoComplete=\"new-password\"\n                      required\n                      value={formData.confirmPassword}\n                      onChange={handleChange}\n                      className=\"appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <button\n                    type=\"submit\"\n                    disabled={isLoading}\n                    className=\"w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    {isLoading ? <Spinner size=\"sm\" color=\"text-white\" className=\"mr-2\" /> : null}\n                    Reset Password\n                  </button>\n                </div>\n              </form>\n            )}\n\n            <div className=\"mt-6 text-center\">\n              <Link to=\"/login\" className=\"font-medium text-primary-600 hover:text-primary-500\">\n                Back to login\n              </Link>\n            </div>\n          </div>\n        </div>\n      </Container>\n    </Layout>\n  );\n};\n"],"names":["ResetPasswordPage","navigate","useNavigate","location","useLocation","formData","setFormData","useState","password","confirmPassword","isLoading","setIsLoading","error","setError","success","setSuccess","token","URLSearchParams","search","get","handleChange","e","name","value","target","prev","_objectSpread","_jsx","Layout","children","_jsxs","Container","maxWidth","className","Alert","type","onClose","onSubmit","async","preventDefault","length","AuthService","resetPassword","setTimeout","err","Error","message","htmlFor","id","autoComplete","required","onChange","disabled","Spinner","size","color","Link","to"],"sourceRoot":""}