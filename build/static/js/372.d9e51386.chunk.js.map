{"version":3,"file":"static/js/372.d9e51386.chunk.js","mappings":"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","sources":["components/admin/performance-dashboard.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { getCollectedMetrics, getPerformanceRecommendations, checkPerformanceTarget } from '../../utils/performance-monitoring.ts';\n\n/**\n * Performance Dashboard component for monitoring and visualizing web performance metrics\n * This is intended for admin/developer use to track performance improvements\n */\nexport const PerformanceDashboard: React.FC = () => {\n  const [metrics, setMetrics] = useState<Record<string, any>>({});\n  const [recommendations, setRecommendations] = useState<string[]>([]);\n  const [targetMet, setTargetMet] = useState<boolean | null>(null);\n  const [navigationTiming, setNavigationTiming] = useState<any>(null);\n\n  useEffect(() => {\n    // Get collected metrics\n    const updateMetrics = () => {\n      const collectedMetrics = getCollectedMetrics();\n      setMetrics(collectedMetrics);\n      setRecommendations(getPerformanceRecommendations());\n      setTargetMet(checkPerformanceTarget());\n    };\n\n    // Get navigation timing data\n    const getNavigationTiming = () => {\n      if (window.performance && window.performance.getEntriesByType) {\n        const navEntry = window.performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n        if (navEntry) {\n          setNavigationTiming({\n            pageLoadTime: navEntry.loadEventEnd - navEntry.startTime,\n            domContentLoaded: navEntry.domContentLoadedEventEnd - navEntry.startTime,\n            timeToInteractive: navEntry.domInteractive - navEntry.startTime,\n            cacheStatus: navEntry.transferSize === 0 ? 'cached' : 'not-cached'\n          });\n        }\n      }\n    };\n\n    // Initial update\n    updateMetrics();\n    getNavigationTiming();\n\n    // Update metrics every 5 seconds\n    const intervalId = setInterval(updateMetrics, 5000);\n\n    return () => clearInterval(intervalId);\n  }, []);\n\n  // Format milliseconds to a readable format\n  const formatMs = (ms: number): string => {\n    if (!ms) return 'N/A';\n    return `${ms.toFixed(1)}ms`;\n  };\n\n  // Get status color based on value\n  const getStatusColor = (name: string, value: number): string => {\n    if (!value) return 'bg-gray-200';\n    \n    switch (name) {\n      case 'LCP': // Largest Contentful Paint\n        return value < 2000 ? 'bg-green-500' : value < 4000 ? 'bg-yellow-500' : 'bg-red-500';\n      case 'FID': // First Input Delay\n        return value < 100 ? 'bg-green-500' : value < 300 ? 'bg-yellow-500' : 'bg-red-500';\n      case 'CLS': // Cumulative Layout Shift\n        return value < 0.1 ? 'bg-green-500' : value < 0.25 ? 'bg-yellow-500' : 'bg-red-500';\n      case 'FCP': // First Contentful Paint\n        return value < 1000 ? 'bg-green-500' : value < 3000 ? 'bg-yellow-500' : 'bg-red-500';\n      case 'TTFB': // Time to First Byte\n        return value < 500 ? 'bg-green-500' : value < 1500 ? 'bg-yellow-500' : 'bg-red-500';\n      default:\n        return 'bg-blue-500';\n    }\n  };\n\n  return (\n    <div className=\"p-6 bg-white rounded-lg shadow-lg\">\n      <h2 className=\"text-2xl font-bold mb-6\">Performance Dashboard</h2>\n      \n      {/* Target Status */}\n      <div className=\"mb-6\">\n        <h3 className=\"text-lg font-semibold mb-2\">Performance Target Status</h3>\n        <div className={`p-4 rounded-md ${\n          targetMet === null ? 'bg-gray-100' : \n          targetMet ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n        }`}>\n          {targetMet === null ? 'Collecting data...' : \n           targetMet ? '✅ Target Met: Page load time under 2 seconds on mobile' : \n           '❌ Target Not Met: Page load time exceeds 2 seconds on mobile'}\n        </div>\n      </div>\n      \n      {/* Core Web Vitals */}\n      <div className=\"mb-6\">\n        <h3 className=\"text-lg font-semibold mb-2\">Core Web Vitals</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          {['LCP', 'FID', 'CLS'].map(metric => (\n            <div key={metric} className=\"p-4 bg-gray-50 rounded-md shadow\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"font-medium\">{metric}</span>\n                <span className={`px-2 py-1 rounded-full text-white text-xs ${\n                  getStatusColor(metric, metrics[metric]?.value)\n                }`}>\n                  {metrics[metric] ? formatMs(metrics[metric].value) : 'N/A'}\n                </span>\n              </div>\n              <p className=\"text-sm text-gray-600 mt-2\">\n                {metric === 'LCP' && 'Largest Contentful Paint - time until largest content element is visible'}\n                {metric === 'FID' && 'First Input Delay - time until browser responds to user interaction'}\n                {metric === 'CLS' && 'Cumulative Layout Shift - measure of visual stability'}\n              </p>\n            </div>\n          ))}\n        </div>\n      </div>\n      \n      {/* Additional Metrics */}\n      <div className=\"mb-6\">\n        <h3 className=\"text-lg font-semibold mb-2\">Additional Metrics</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {['FCP', 'TTFB'].map(metric => (\n            <div key={metric} className=\"p-4 bg-gray-50 rounded-md shadow\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"font-medium\">{metric}</span>\n                <span className={`px-2 py-1 rounded-full text-white text-xs ${\n                  getStatusColor(metric, metrics[metric]?.value)\n                }`}>\n                  {metrics[metric] ? formatMs(metrics[metric].value) : 'N/A'}\n                </span>\n              </div>\n              <p className=\"text-sm text-gray-600 mt-2\">\n                {metric === 'FCP' && 'First Contentful Paint - time until first content is visible'}\n                {metric === 'TTFB' && 'Time To First Byte - time until first byte is received'}\n              </p>\n            </div>\n          ))}\n        </div>\n      </div>\n      \n      {/* Navigation Timing */}\n      {navigationTiming && (\n        <div className=\"mb-6\">\n          <h3 className=\"text-lg font-semibold mb-2\">Navigation Timing</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <div className=\"p-4 bg-gray-50 rounded-md shadow\">\n              <div className=\"font-medium\">Page Load Time</div>\n              <div className=\"text-xl mt-1\">{formatMs(navigationTiming.pageLoadTime)}</div>\n            </div>\n            <div className=\"p-4 bg-gray-50 rounded-md shadow\">\n              <div className=\"font-medium\">DOM Content Loaded</div>\n              <div className=\"text-xl mt-1\">{formatMs(navigationTiming.domContentLoaded)}</div>\n            </div>\n            <div className=\"p-4 bg-gray-50 rounded-md shadow\">\n              <div className=\"font-medium\">Time to Interactive</div>\n              <div className=\"text-xl mt-1\">{formatMs(navigationTiming.timeToInteractive)}</div>\n            </div>\n            <div className=\"p-4 bg-gray-50 rounded-md shadow\">\n              <div className=\"font-medium\">Cache Status</div>\n              <div className=\"text-xl mt-1 capitalize\">{navigationTiming.cacheStatus}</div>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {/* Recommendations */}\n      {recommendations.length > 0 && (\n        <div className=\"mb-6\">\n          <h3 className=\"text-lg font-semibold mb-2\">Performance Recommendations</h3>\n          <ul className=\"list-disc pl-5 space-y-2\">\n            {recommendations.map((rec, index) => (\n              <li key={index} className=\"text-gray-700\">{rec}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n"],"names":["PerformanceDashboard","metrics","setMetrics","useState","recommendations","setRecommendations","targetMet","setTargetMet","navigationTiming","setNavigationTiming","useEffect","updateMetrics","collectedMetrics","getCollectedMetrics","getPerformanceRecommendations","checkPerformanceTarget","getNavigationTiming","window","performance","getEntriesByType","navEntry","pageLoadTime","loadEventEnd","startTime","domContentLoaded","domContentLoadedEventEnd","timeToInteractive","domInteractive","cacheStatus","transferSize","intervalId","setInterval","clearInterval","formatMs","ms","concat","toFixed","getStatusColor","name","value","_jsxs","className","children","_jsx","map","metric","_metrics$metric","_metrics$metric2","length","rec","index"],"sourceRoot":""}